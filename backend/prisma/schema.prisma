generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  firstName  String?
  lastName   String?
  username   String?  @unique
  avatarUrl  String?
  bio        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  lat        Float?
  lng        Float?

  likes           Like[]
  swipesGiven     Swipe[] @relation("UserSwipesGiven")
  swipesReceived  Swipe[] @relation("UserSwipesReceived")
  eventsOrganized Event[] @relation("EventOrganizer")
}


model Swipe {
  id        Int  @id @default(autoincrement())
  swiperId  Int
  swipedId  Int
  liked     Boolean
  createdAt DateTime @default(now())

  swiper    User @relation("UserSwipesGiven", fields: [swiperId], references: [id])
  swiped    User @relation("UserSwipesReceived", fields: [swipedId], references: [id])

  @@unique([swiperId, swipedId])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String   @default("Unnamed Event")
  date        DateTime @default(now())
  description String?
  address     String?
  lat         Float    @default(0)
  lng         Float    @default(0)
  category    String?
  organizerId Int?
  organizer   User?    @relation("EventOrganizer", fields: [organizerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt


  likes       Like[]
}

model Like {
  id        Int   @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())

  event     Event @relation(fields: [eventId], references: [id])
  user      User  @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}
